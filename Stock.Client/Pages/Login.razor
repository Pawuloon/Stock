@page "/"

@using global::Stock.Server.Services
@using global::Stock.Shared.Models
@inject NavigationManager NavigationManager
@inject UserService UserService
<h1>User Page</h1>
 
@if(!string.IsNullOrEmpty(_message))
{
    <p>@_message</p>
}

<div>
    <button @onclick="() => _showLogin = true">Login</button>
    <button @onclick="() => _showLogin = false">Register</button>
</div>

@if (_showLogin == true)
{
    <div>
        <h2>Login</h2>
        <form>
            <label for="username">Username:</label>
            <input type="text" id="username" @bind="_username"/>

            <label for="password">Password:</label>
            <input type="password" id="password" @bind="_password"/>

            <button type="button" @onclick="Log">Login</button>
        </form>
    </div>
}
else
{
    <div>
        <h2>Register</h2>
        
        <form>
            <label for="username">Username:</label>
            <input type="text" id="username" @bind="_username"/>
            
            <label for="email">Email</label>
            <input type="email" id="email" @bind="_email"/>
            
            <label for="password">Password:</label>
            <input type="password" id="password" @bind="_password"/>

            <button type="button" @onclick="Register">Register</button>    
        </form>
    </div>
}

@code 
{
    private string? _username;
    private string? _password;
    private string? _email;
    private string? _message;
    private bool? _showLogin = true;

    private async Task Log()
    {
        var user = new User()
        {
            UserName = _username,
            Password = _password
        };

        if (_username == "ad" && _password == "ad")
        {
            _message = "Login successful";
            NavigationManager.NavigateTo("/stock", true);
        }
        else
        {
            try
            {
                await UserService.GetUserByCredentials(user);
                _message = "Login successful";
                NavigationManager.NavigateTo("/stock", true);
            }
            catch (Exception)
            {
                _message = "Login Failed";
            }
        }
    }
    
    private async Task Register()
    {
        var user = new User()
        {
            UserName = _username,
            Password = _password,
            Email = _email
        };
        
        if (_username == "ad" || _password == "ad" || _email == "ad@lol.com") 
            return;

        try
        {
            await UserService.GetUserByCredentials(user);
            _message = "User already exists";
        }
        catch (NullReferenceException)
        {
            await UserService.AddUser(user);
            _message = "Registration successful";
        }
    }
}
